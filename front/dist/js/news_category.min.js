function NewsCategory(){}NewsCategory.prototype.run=function(){var e=this;e.listenAddCategoryEvent(),e.listenEditCategoryEvent(),e.listenDeleteCategoryEvent()},NewsCategory.prototype.listenAddCategoryEvent=function(){$("#add-btn").click(function(){xfzalert.alertOneInput({title:"Add news category",placeholder:"Input category name",confirmCallback:function(e){xfzajax.post({url:"/cms/add_news_category/",data:{name:e},success:function(e){200===e.code?(console.log(e),window.location.reload()):xfzalert.close()}})}})})},NewsCategory.prototype.listenEditCategoryEvent=function(){$(".edit-btn").click(function(){var e=$(this).parent().parent(),t=e.attr("data-pk"),a=e.attr("data-name");xfzalert.alertOneInput({title:"Edit category name",placeholder:"New category name",value:a,confirmCallback:function(e){xfzajax.post({url:"/cms/edit_news_category/",data:{pk:t,name:e},success:function(e){200===e.code?window.location.reload():(xfzalert.close(),window.messageBox.showError(e.message))}})}})})},NewsCategory.prototype.listenDeleteCategoryEvent=function(){$(".delete-btn").click(function(){var e=$(this).parent().parent().attr("data-pk");xfzalert.alertConfirm({title:"Are you sure to delete?",confirmCallback:function(){xfzajax.post({url:"/cms/delete_news_category/",data:{pk:e},success:function(e){200===e.code?window.location.reload():xfzalert.close()}})}})})},$(function(){(new NewsCategory).run()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5ld3NfY2F0ZWdvcnkuanMiXSwibmFtZXMiOlsiTmV3c0NhdGVnb3J5IiwicHJvdG90eXBlIiwicnVuIiwic2VsZiIsInRoaXMiLCJsaXN0ZW5BZGRDYXRlZ29yeUV2ZW50IiwibGlzdGVuRWRpdENhdGVnb3J5RXZlbnQiLCJsaXN0ZW5EZWxldGVDYXRlZ29yeUV2ZW50IiwiJCIsImNsaWNrIiwieGZ6YWxlcnQiLCJhbGVydE9uZUlucHV0IiwidGl0bGUiLCJwbGFjZWhvbGRlciIsImNvbmZpcm1DYWxsYmFjayIsImlucHVWYWx1ZSIsInhmemFqYXgiLCJwb3N0IiwidXJsIiwiZGF0YSIsIm5hbWUiLCJzdWNjZXNzIiwicmVzdWx0IiwiY29uc29sZSIsImxvZyIsIndpbmRvdyIsImxvY2F0aW9uIiwicmVsb2FkIiwiY2xvc2UiLCJ0ciIsInBhcmVudCIsInBrIiwiYXR0ciIsInZhbHVlIiwiaW5wdXRWYWx1ZSIsIm1lc3NhZ2VCb3giLCJzaG93RXJyb3IiLCJhbGVydENvbmZpcm0iXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLGdCQUdUQSxhQUFhQyxVQUFVQyxJQUFNLFdBQ3pCLElBQUlDLEVBQU9DLEtBQ1hELEVBQUtFLHlCQUNMRixFQUFLRywwQkFDTEgsRUFBS0ksNkJBR1RQLGFBQWFDLFVBQVVJLHVCQUF5QixXQUMvQkcsRUFBRSxZQUNSQyxNQUFNLFdBQ1RDLFNBQVNDLGNBQWMsQ0FDbkJDLE1BQVMsb0JBQ1RDLFlBQWUsc0JBQ2ZDLGdCQUFtQixTQUFVQyxHQUN6QkMsUUFBUUMsS0FBSyxDQUNUQyxJQUFPLDBCQUNQQyxLQUFRLENBQ0pDLEtBQVFMLEdBRVpNLFFBQVcsU0FBVUMsR0FDSyxNQUFuQkEsRUFBYSxNQUNaQyxRQUFRQyxJQUFJRixHQUNaRyxPQUFPQyxTQUFTQyxVQUVoQmpCLFNBQVNrQixpQkFXckM1QixhQUFhQyxVQUFVSyx3QkFBMEIsV0FDL0JFLEVBQUUsYUFDUkMsTUFBTSxXQUNWLElBQ0lvQixFQURhckIsRUFBRUosTUFDQzBCLFNBQVNBLFNBQ3pCQyxFQUFLRixFQUFHRyxLQUFLLFdBQ2JaLEVBQU9TLEVBQUdHLEtBQUssYUFDbkJ0QixTQUFTQyxjQUFjLENBQ25CQyxNQUFTLHFCQUNUQyxZQUFlLG9CQUNmb0IsTUFBU2IsRUFDVE4sZ0JBQW1CLFNBQVVvQixHQUN6QmxCLFFBQVFDLEtBQUssQ0FDVEMsSUFBTywyQkFDUEMsS0FBUSxDQUNKWSxHQUFNQSxFQUNOWCxLQUFRYyxHQUVaYixRQUFXLFNBQVVDLEdBQ0ssTUFBbkJBLEVBQWEsS0FDWkcsT0FBT0MsU0FBU0MsVUFFaEJqQixTQUFTa0IsUUFDVEgsT0FBT1UsV0FBV0MsVUFBVWQsRUFBZ0IsbUJBYXhFdEIsYUFBYUMsVUFBVU0sMEJBQTRCLFdBQy9CQyxFQUFFLGVBQ1JDLE1BQU0sV0FDYixJQUVJc0IsRUFGYXZCLEVBQUVKLE1BQ0MwQixTQUFTQSxTQUNqQkUsS0FBSyxXQUNqQnRCLFNBQVMyQixhQUFhLENBQ2xCekIsTUFBUywwQkFDVEUsZ0JBQW1CLFdBQ2ZFLFFBQVFDLEtBQUssQ0FDVEMsSUFBTyw2QkFDUEMsS0FBUSxDQUNKWSxHQUFNQSxHQUVWVixRQUFXLFNBQVVDLEdBQ0ssTUFBbkJBLEVBQWEsS0FDWkcsT0FBT0MsU0FBU0MsU0FFaEJqQixTQUFTa0IsaUJBWXBDcEIsRUFBRSxZQUNpQixJQUFJUixjQUNWRSIsImZpbGUiOiJuZXdzX2NhdGVnb3J5Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIE5ld3NDYXRlZ29yeSgpIHtcbn07XG5cbk5ld3NDYXRlZ29yeS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZWxmLmxpc3RlbkFkZENhdGVnb3J5RXZlbnQoKTtcbiAgICBzZWxmLmxpc3RlbkVkaXRDYXRlZ29yeUV2ZW50KCk7XG4gICAgc2VsZi5saXN0ZW5EZWxldGVDYXRlZ29yeUV2ZW50KCk7XG59O1xuXG5OZXdzQ2F0ZWdvcnkucHJvdG90eXBlLmxpc3RlbkFkZENhdGVnb3J5RXZlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFkZEJ0biA9ICQoJyNhZGQtYnRuJyk7XG4gICAgYWRkQnRuLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgeGZ6YWxlcnQuYWxlcnRPbmVJbnB1dCh7XG4gICAgICAgICAgICAndGl0bGUnOiAnQWRkIG5ld3MgY2F0ZWdvcnknLFxuICAgICAgICAgICAgJ3BsYWNlaG9sZGVyJzogJ0lucHV0IGNhdGVnb3J5IG5hbWUnLFxuICAgICAgICAgICAgJ2NvbmZpcm1DYWxsYmFjayc6IGZ1bmN0aW9uIChpbnB1VmFsdWUpIHtcbiAgICAgICAgICAgICAgICB4ZnphamF4LnBvc3Qoe1xuICAgICAgICAgICAgICAgICAgICAndXJsJzogJy9jbXMvYWRkX25ld3NfY2F0ZWdvcnkvJyxcbiAgICAgICAgICAgICAgICAgICAgJ2RhdGEnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnbmFtZSc6IGlucHVWYWx1ZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlc3VsdFsnY29kZSddID09PSAyMDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeGZ6YWxlcnQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG5cblxuXG5OZXdzQ2F0ZWdvcnkucHJvdG90eXBlLmxpc3RlbkVkaXRDYXRlZ29yeUV2ZW50ID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgZWRpdEJ0biA9ICQoXCIuZWRpdC1idG5cIik7XG4gICAgZWRpdEJ0bi5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjdXJyZW50QnRuID0gJCh0aGlzKTtcbiAgICAgICAgdmFyIHRyID0gY3VycmVudEJ0bi5wYXJlbnQoKS5wYXJlbnQoKTtcbiAgICAgICAgdmFyIHBrID0gdHIuYXR0cignZGF0YS1waycpO1xuICAgICAgICB2YXIgbmFtZSA9IHRyLmF0dHIoJ2RhdGEtbmFtZScpO1xuICAgICAgICB4ZnphbGVydC5hbGVydE9uZUlucHV0KHtcbiAgICAgICAgICAgICd0aXRsZSc6ICdFZGl0IGNhdGVnb3J5IG5hbWUnLFxuICAgICAgICAgICAgJ3BsYWNlaG9sZGVyJzogJ05ldyBjYXRlZ29yeSBuYW1lJyxcbiAgICAgICAgICAgICd2YWx1ZSc6IG5hbWUsXG4gICAgICAgICAgICAnY29uZmlybUNhbGxiYWNrJzogZnVuY3Rpb24gKGlucHV0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICB4ZnphamF4LnBvc3Qoe1xuICAgICAgICAgICAgICAgICAgICAndXJsJzogJy9jbXMvZWRpdF9uZXdzX2NhdGVnb3J5LycsXG4gICAgICAgICAgICAgICAgICAgICdkYXRhJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3BrJzogcGssXG4gICAgICAgICAgICAgICAgICAgICAgICAnbmFtZSc6IGlucHV0VmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdzdWNjZXNzJzogZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYocmVzdWx0Wydjb2RlJ10gPT09IDIwMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeGZ6YWxlcnQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubWVzc2FnZUJveC5zaG93RXJyb3IocmVzdWx0WydtZXNzYWdlJ10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBcbn07XG5cblxuTmV3c0NhdGVnb3J5LnByb3RvdHlwZS5saXN0ZW5EZWxldGVDYXRlZ29yeUV2ZW50ID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgZGVsZXRlQnRuID0gJCgnLmRlbGV0ZS1idG4nKTtcbiAgICBkZWxldGVCdG4uY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgIHZhciBjdXJyZW50QnRuID0gJCh0aGlzKTtcbiAgICAgICB2YXIgdHIgPSBjdXJyZW50QnRuLnBhcmVudCgpLnBhcmVudCgpO1xuICAgICAgIHZhciBwayA9IHRyLmF0dHIoJ2RhdGEtcGsnKTtcbiAgICAgICB4ZnphbGVydC5hbGVydENvbmZpcm0oe1xuICAgICAgICAgICAndGl0bGUnOiAnQXJlIHlvdSBzdXJlIHRvIGRlbGV0ZT8nLFxuICAgICAgICAgICAnY29uZmlybUNhbGxiYWNrJzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgeGZ6YWpheC5wb3N0KHtcbiAgICAgICAgICAgICAgICAgICAndXJsJzogJy9jbXMvZGVsZXRlX25ld3NfY2F0ZWdvcnkvJyxcbiAgICAgICAgICAgICAgICAgICAnZGF0YSc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgJ3BrJzogcGssXG4gICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgaWYocmVzdWx0Wydjb2RlJ10gPT09IDIwMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgeGZ6YWxlcnQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgIH1cbiAgICAgICB9KTtcbiAgICB9KTtcbn07XG5cblxuXG4kKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2F0ZWdvcnkgPSBuZXcgTmV3c0NhdGVnb3J5KCk7XG4gICAgY2F0ZWdvcnkucnVuKCk7XG59KTsiXX0=
